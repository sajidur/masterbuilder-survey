CREATE DEFINER=`root`@`localhost` PROCEDURE `ReportData`()
BEGIN
WITH BaseItems AS (
    -- Base hierarchy: Modules → Apps → Menus → Items → Fields
    SELECT 
        md.serialNumber AS moduleserialNumber,
        md.name AS modulename,
        app.serialNumber AS appserialNumber,
        app.name AS appname,
        menu.serialNumber AS menuserialNumber,
        menu.title,
        item.serialNumber AS itemserialNumber,
        item.id as itemid,
        item.name AS itemName,
        item.itemType AS itemType,
        item.buttonType AS regName,
        item.buttonLabel AS itemViewEntry,
        item.description AS itemdescription,
        fi.serialNumber AS fieldSerialNumber,
        fi.fieldGroupCode,
        fi.id AS fieldId,
        fi.tier AS dpgrouptier,
        fi.displayType AS dpgroupdisplay,
        fi.description AS dpgroupremarks
    FROM modules md
    INNER JOIN app ON md.id = app.moduleId
    INNER JOIN menu ON app.id = menu.appId
    INNER JOIN item ON menu.id = item.menuId
    INNER JOIN field fi ON fi.itemId = item.id
),

dpgroupmap AS (
    -- Optional sub-items and sub-sub-items through dpgroupmap
    SELECT 
        dpgm.itemId,
        dpgm.dpGroupId,
        dpgm.id AS dpGroupMapId,
        si.serialNumber AS siserialNumber,
        si.name AS siitem,
        si.layout AS silayout,
        si.description AS sidescription,
        si.buttonLabel AS sibuttonLabel,
        si.navigationTo AS sisinavigationTo,
        si.tier AS itier,
        ssi.serialNumber AS ssiserialNumber,
        ssi.name AS ssiname,
        ssi.layout AS ssilayout,
        sssi.serialNumber AS sssiserialNumber,
        sssi.name AS sssiname,
        sssi.layout AS sssilayout
    FROM dpgroupmap dpgm
    LEFT JOIN sub_item si ON si.id = dpgm.subItemId
    LEFT JOIN sub_sub_item ssi ON ssi.id = dpgm.subSubItemId
    LEFT JOIN sub_sub_sub_item sssi ON sssi.id = dpgm.subSubSubItemId
),

DataPoints AS (
    -- Optional datapoints through datapointmap
    SELECT 
        dpm.itemId,
        dp.id AS datapointId,
        dp.serialNumber AS datapointSerialNumber,
        dp.dataPoint,
        dp.dpGroupCode,
        dp.dataType,
        dp.isHide,
        dp.isRequired,
        dp.regional,
        dpm.dpGroupId
    FROM datapointmap dpm
    inner JOIN datapoint dp ON dp.id = dpm.dataPointId
)

-- Combine everything
SELECT
    b.*,
    si.dpGroupMapId AS dpGroupMapStatus,
    si.siserialNumber,
    si.siitem,
    si.silayout,
    si.sidescription,
    si.sibuttonLabel,
    si.sisinavigationTo,
    si.itier,
    si.ssiserialNumber,
    si.ssiname,
    si.ssilayout,
    si.sssiserialNumber,
    si.sssiname,
    si.sssilayout,
    dp.datapointId,
    dp.datapointSerialNumber,
    dp.dataPoint,
    dp.dpGroupCode,
    dp.dataType,
    dp.isHide,
    dp.isRequired,
    dp.regional,
    CASE WHEN b.fieldId IS NOT NULL THEN '1' ELSE '0' END AS fieldMappingStatus,
    CASE WHEN dp.datapointId IS NOT NULL THEN '1' ELSE '0' END AS datapointMappingStatus,
    CASE WHEN si.dpGroupMapId IS NOT NULL THEN '1' ELSE '0' END AS dpGroupMapStatus
FROM BaseItems b
left JOIN dpgroupmap si ON si.dpGroupId = b.fieldId  -- or use item.id if available
LEFT JOIN DataPoints dp ON dp.dpGroupId = b.fieldId
ORDER BY 
    CAST(b.moduleserialNumber AS UNSIGNED),
    CAST(b.appserialNumber AS UNSIGNED),
    CAST(b.menuserialNumber AS UNSIGNED),
    CAST(b.itemserialNumber AS UNSIGNED),
    CAST(si.siserialNumber AS UNSIGNED),
    CAST(si.ssiserialNumber AS UNSIGNED),
    CAST(si.sssiserialNumber AS UNSIGNED),
    CAST(b.fieldSerialNumber AS UNSIGNED),
    CAST(dp.datapointSerialNumber AS UNSIGNED);

END