import { Modules } from './survey-module.entity/modules.entity';
import { Repository } from 'typeorm';
import { App } from './survey-module.entity/app.entity';
import { Menu } from './survey-module.entity/menu.entity';
import { Item } from './survey-module.entity/item.entity';
import { SubItem } from './survey-module.entity/subitem.entity';
import { Field } from './survey-module.entity/field.entity';
import { SubSubItem } from './survey-module.entity/subsubitem.entity';
import { AppDto } from './survey-module.dto/App.dto';
export declare class SurveyModuleService {
    private readonly modulesRepository;
    private readonly appRepository;
    private readonly menuRepository;
    private readonly itemRepository;
    private readonly subItemRepository;
    private readonly fieldRepository;
    private readonly subSubItemRepository;
    constructor(modulesRepository: Repository<Modules>, appRepository: Repository<App>, menuRepository: Repository<Menu>, itemRepository: Repository<Item>, subItemRepository: Repository<SubItem>, fieldRepository: Repository<Field>, subSubItemRepository: Repository<SubSubItem>);
    findAllSubSubItem(): Promise<SubSubItem[]>;
    findOneSubSubItem(id: number): Promise<SubSubItem>;
    createSubSubItem(data: SubSubItem): Promise<SubSubItem>;
    updateSubSubItem(id: number, data: SubSubItem): Promise<SubSubItem>;
    deleteSubSubItem(id: number): Promise<void>;
    findAllFields(): Promise<Field[]>;
    findOneField(id: number): Promise<Field | null>;
    createField(field: Field): Promise<Field>;
    updateField(id: number, updated: Field): Promise<Field>;
    deleteField(id: number): Promise<void>;
    findAllSubItems(): Promise<SubItem[]>;
    findOneSubItem(id: number): Promise<SubItem | null>;
    createSubItem(subItem: SubItem): Promise<SubItem>;
    updateSubItem(id: number, updated: SubItem): Promise<SubItem>;
    deleteSubItem(id: number): Promise<void>;
    findAllItems(): Promise<Item[]>;
    findOneItem(id: number): Promise<Item | null>;
    createItem(item: Item): Promise<Item>;
    updateItem(id: number, updatedItem: Item): Promise<Item>;
    deleteItem(id: number): Promise<void>;
    findAll(): Promise<Modules[]>;
    findOne(id: number): Promise<Modules>;
    update(id: number, module: Modules): Promise<Modules>;
    create(user: Partial<Modules>): Promise<Modules>;
    remove(id: number): Promise<void>;
    private toDto;
    findAllApps(): Promise<AppDto[]>;
    findOneApp(id: number): Promise<AppDto | null>;
    createApp(app: App): Promise<AppDto>;
    updateApp(id: number, app: App): Promise<AppDto>;
    deleteApp(id: number): Promise<void>;
    findAllMenus(): Promise<Menu[]>;
    findOneMenu(id: number): Promise<Menu | null>;
    createMenu(menu: Menu): Promise<Menu>;
    updateMenu(id: number, updatedMenu: Menu): Promise<Menu>;
    deleteMenu(id: number): Promise<void>;
}
