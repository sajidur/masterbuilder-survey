import { Modules } from './survey-module.entity/modules.entity';
import { Repository } from 'typeorm';
import { App } from './survey-module.entity/app.entity';
import { Menu } from './survey-module.entity/menu.entity';
import { Item } from './survey-module.entity/item.entity';
import { SubItem } from './survey-module.entity/subitem.entity';
import { Field } from './survey-module.entity/field.entity';
import { SubSubItem } from './survey-module.entity/subsubitem.entity';
import { AppDto, CreateAppDto, UpdateAppDto } from './survey-module.dto/App.dto';
import { CreateMenuDto, MenuDto } from './survey-module.dto/menu.dto';
import { CreateItemDto, ItemDto } from './survey-module.dto/item.dto';
import { CreateSubItemDto, SubItemDto } from './survey-module.dto/subiItem.dto';
import { CreateSubSubItemDto, SubSubItemDto } from './survey-module.dto/subSubItem.dto';
import { CreateFieldDto, FieldDto } from './survey-module.dto/field.dto';
export declare class SurveyModuleService {
    private readonly modulesRepository;
    private readonly appRepository;
    private readonly menuRepository;
    private readonly itemRepository;
    private readonly subItemRepository;
    private readonly fieldRepository;
    private readonly subSubItemRepository;
    constructor(modulesRepository: Repository<Modules>, appRepository: Repository<App>, menuRepository: Repository<Menu>, itemRepository: Repository<Item>, subItemRepository: Repository<SubItem>, fieldRepository: Repository<Field>, subSubItemRepository: Repository<SubSubItem>);
    toSubSubItemDto(subSubItem: SubSubItem): Promise<SubSubItemDto>;
    findAllSubSubItem(): Promise<SubSubItemDto[]>;
    findOneSubSubItem(id: number): Promise<SubSubItemDto>;
    createSubSubItem(data: CreateSubSubItemDto): Promise<SubSubItemDto>;
    updateSubSubItem(id: number, data: CreateSubSubItemDto): Promise<SubSubItemDto>;
    deleteSubSubItem(id: number): Promise<void>;
    toFieldDto(field: Field): Promise<FieldDto>;
    findAllFields(): Promise<FieldDto[]>;
    findOneField(id: number): Promise<FieldDto | null>;
    createField(field: CreateFieldDto): Promise<FieldDto>;
    updateField(id: number, updated: CreateFieldDto): Promise<FieldDto>;
    deleteField(id: number): Promise<void>;
    findAllSubItems(): Promise<SubItem[]>;
    findOneSubItem(id: number): Promise<SubItem | null>;
    createSubItem(subItem: CreateSubItemDto): Promise<SubItem>;
    updateSubItem(id: number, updated: CreateSubItemDto): Promise<SubItem>;
    toSubItemDto(subItem: SubItem): Promise<SubItemDto>;
    deleteSubItem(id: number): Promise<void>;
    private toItemDto;
    findAllItems(): Promise<ItemDto[]>;
    findOneItem(id: number): Promise<ItemDto | null>;
    createItem(item: CreateItemDto): Promise<ItemDto>;
    updateItem(id: number, updatedItem: CreateItemDto): Promise<ItemDto>;
    deleteItem(id: number): Promise<void>;
    findAll(): Promise<Modules[]>;
    findOne(id: number): Promise<Modules>;
    update(id: number, moduleDto: Partial<Modules>): Promise<Modules>;
    create(user: Partial<Modules>): Promise<Modules>;
    remove(id: number): Promise<void>;
    private toDto;
    findAllApps(): Promise<AppDto[]>;
    findOneApp(id: number): Promise<AppDto | null>;
    createApp(createAppDto: CreateAppDto): Promise<AppDto>;
    updateApp(id: number, app: UpdateAppDto): Promise<AppDto>;
    deleteApp(id: number): Promise<void>;
    private toMenuDto;
    findAllMenus(): Promise<MenuDto[]>;
    findOneMenu(id: number): Promise<MenuDto | null>;
    createMenu(menuDto: CreateMenuDto): Promise<MenuDto>;
    updateMenu(id: number, updateDto: CreateMenuDto): Promise<MenuDto>;
    deleteMenu(id: number): Promise<void>;
}
