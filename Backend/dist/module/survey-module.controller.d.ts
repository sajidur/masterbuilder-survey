import { SurveyModuleService } from './survey-module.service';
import { Modules } from './module.entity/modules.entity';
import { SubSubItem } from './module.entity/subsubitem.entity';
import { AppDto, CreateAppDto, UpdateAppDto } from './module.dto/App.dto';
import { CreateMenuDto, MenuDto } from './module.dto/menu.dto';
import { CreateItemDto, ItemDto } from './module.dto/item.dto';
import { CreateSubItemDto, SubItemDto } from './module.dto/subiItem.dto';
import { CreateSubSubItemDto, SubSubItemDto } from './module.dto/subSubItem.dto';
import { CreateFieldDto, FieldDto } from './module.dto/field.dto';
import { CreateModuleDto, UpdateModuleDto } from './module.dto/create-module.dto';
import { SubSubSubItemDto, CreateSubSubSubItemDto } from './module.dto/subsubsubitem.dto';
export declare class SurveyModuleController {
    private readonly moduleService;
    constructor(moduleService: SurveyModuleService);
    findAllSubItems(): Promise<SubItemDto[]>;
    findOneSubItem(id: string): Promise<SubItemDto>;
    createSubItem(subItem: CreateSubItemDto, req: Request): Promise<SubItemDto>;
    updateSubItem(id: string, subItem: CreateSubItemDto, req: Request): Promise<SubItemDto>;
    deleteSubItem(id: string): Promise<void>;
    findAll(): Promise<Modules[]>;
    findOne(id: string): Promise<Modules>;
    create(moduleDto: CreateModuleDto, req: Request): Promise<Modules>;
    update(id: string, moduleDto: UpdateModuleDto, req: Request): Promise<Modules>;
    remove(id: string): Promise<void>;
    findAllApps(): Promise<AppDto[]>;
    findOneApp(id: string): Promise<AppDto>;
    createApp(app: CreateAppDto, req: Request): Promise<AppDto | null>;
    updateApp(id: string, app: UpdateAppDto, req: Request): Promise<AppDto | null>;
    deleteApp(id: string): Promise<void>;
    findAllMenus(): Promise<MenuDto[]>;
    findOneMenu(id: string): Promise<MenuDto>;
    createMenu(menuDto: CreateMenuDto, req: Request): Promise<MenuDto>;
    updateMenu(id: string, menuDto: CreateMenuDto, req: Request): Promise<MenuDto>;
    deleteMenu(id: string): Promise<void>;
    findAllItems(): Promise<ItemDto[]>;
    findOneItem(id: string): Promise<ItemDto>;
    createItem(item: CreateItemDto, req: Request): Promise<ItemDto>;
    updateItem(id: string, item: CreateItemDto, req: Request): Promise<ItemDto>;
    deleteItem(id: string): Promise<void>;
    findAllFields(): Promise<FieldDto[]>;
    findOneField(id: string): Promise<FieldDto>;
    createField(field: CreateFieldDto, req: Request): Promise<FieldDto>;
    updateField(id: string, field: CreateFieldDto, req: Request): Promise<FieldDto>;
    deleteField(id: string): Promise<void>;
    findAllSubSubItems(): Promise<SubSubItemDto[]>;
    findOneSubSubItem(id: string): Promise<SubSubItemDto>;
    createSubSubItem(data: CreateSubSubItemDto, req: Request): Promise<SubSubItemDto>;
    updateSubSubItem(id: string, data: SubSubItem, req: Request): Promise<SubSubItemDto>;
    deleteSubSubItem(id: string): Promise<void>;
    findAllSubSubSubItems(): Promise<SubSubSubItemDto[]>;
    findOneSubSubSubItem(id: string): Promise<SubSubSubItemDto>;
    createSubSubSubItem(dto: CreateSubSubSubItemDto, req: Request): Promise<SubSubSubItemDto>;
    updateSubSubSubItem(id: string, dto: CreateSubSubSubItemDto, req: Request): Promise<SubSubSubItemDto>;
    deleteSubSubSubItem(id: string): Promise<void>;
}
