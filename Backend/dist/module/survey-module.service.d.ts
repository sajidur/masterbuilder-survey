import { Modules } from './module.entity/modules.entity';
import { Repository } from 'typeorm';
import { App } from './module.entity/app.entity';
import { Menu } from './module.entity/menu.entity';
import { Item } from './module.entity/item.entity';
import { SubItem } from './module.entity/subitem.entity';
import { Field } from './module.entity/field.entity';
import { SubSubItem } from './module.entity/subsubitem.entity';
import { AppDto, CreateAppDto, UpdateAppDto } from './module.dto/App.dto';
import { CreateMenuDto, MenuDto } from './module.dto/menu.dto';
import { CreateItemDto, ItemDto } from './module.dto/item.dto';
import { CreateSubItemDto, SubItemDto } from './module.dto/subiItem.dto';
import { CreateSubSubItemDto, SubSubItemDto } from './module.dto/subSubItem.dto';
import { CreateFieldDto, FieldDto } from './module.dto/field.dto';
import { CreateModuleDto, UpdateModuleDto } from './module.dto/create-module.dto';
import { User } from 'src/user/user.entity/user.entity';
import { SubSubSubItem } from './module.entity/subSubSubItem.entity';
import { CreateSubSubSubItemDto, SubSubSubItemDto } from './module.dto/subsubsubitem.dto';
import { Template } from 'src/Template/entity/template';
export declare class SurveyModuleService {
    private readonly modulesRepository;
    private readonly appRepository;
    private readonly menuRepository;
    private readonly itemRepository;
    private readonly subItemRepository;
    private readonly fieldRepository;
    private readonly subSubItemRepository;
    private readonly subSubSubItemRepo;
    private readonly TemplateRepo;
    constructor(modulesRepository: Repository<Modules>, appRepository: Repository<App>, menuRepository: Repository<Menu>, itemRepository: Repository<Item>, subItemRepository: Repository<SubItem>, fieldRepository: Repository<Field>, subSubItemRepository: Repository<SubSubItem>, subSubSubItemRepo: Repository<SubSubSubItem>, TemplateRepo: Repository<Template>);
    toSubSubItemDto(subSubItem: SubSubItem): Promise<SubSubItemDto>;
    private toSubSubItemDto1;
    findAllSubSubItem(): Promise<SubSubItemDto[]>;
    findOneSubSubItem(id: string): Promise<SubSubItemDto>;
    createSubSubItem(data: CreateSubSubItemDto, user: User): Promise<SubSubItemDto>;
    updateSubSubItem(id: string, data: CreateSubSubItemDto, user: User): Promise<SubSubItemDto>;
    deleteSubSubItem(id: string): Promise<void>;
    toFieldDto1(field: Field, subSubSubItemMap: Map<string, SubSubSubItem>): Promise<FieldDto>;
    findAllFields(): Promise<FieldDto[]>;
    findOneField(id: string): Promise<FieldDto | null>;
    createField(field: CreateFieldDto, user: User): Promise<FieldDto>;
    updateField(id: string, updated: CreateFieldDto, user: User): Promise<FieldDto>;
    deleteField(id: string): Promise<void>;
    private toSubItemDto1;
    findAllSubItems(): Promise<SubItemDto[]>;
    findOneSubItem(id: string): Promise<SubItemDto>;
    createSubItem(subItem: CreateSubItemDto, user: User): Promise<SubItemDto>;
    updateSubItem(id: string, updated: CreateSubItemDto, user: User): Promise<SubItemDto>;
    toSubItemDto(subItem: SubItem): Promise<SubItemDto>;
    deleteSubItem(id: string): Promise<void>;
    private toItemDto;
    private toItemDto1;
    findAllItems(): Promise<ItemDto[]>;
    findOneItem(id: string): Promise<ItemDto | null>;
    createItem(item: CreateItemDto, user: User): Promise<ItemDto>;
    updateItem(id: string, updatedItem: CreateItemDto, user: User): Promise<ItemDto>;
    deleteItem(id: string): Promise<void>;
    findAll(): Promise<Modules[]>;
    findOne(id: string): Promise<Modules>;
    update(id: string, dto: UpdateModuleDto, user: User): Promise<Modules>;
    create(dto: CreateModuleDto, user: User): Promise<Modules>;
    remove(id: string): Promise<void>;
    private toDto;
    findAllApps(): Promise<AppDto[]>;
    findOneApp(id: string): Promise<AppDto | null>;
    createApp(createAppDto: CreateAppDto, user: User): Promise<AppDto | null>;
    updateApp(id: string, app: UpdateAppDto, user: User): Promise<AppDto | null>;
    deleteApp(id: string): Promise<void>;
    private toMenuDto;
    private toMenuDto1;
    findAllMenus(): Promise<MenuDto[]>;
    findOneMenu(id: string): Promise<MenuDto>;
    createMenu(menuDto: CreateMenuDto, user: User): Promise<MenuDto>;
    updateMenu(id: string, updateDto: CreateMenuDto, user: User): Promise<MenuDto>;
    deleteMenu(id: string): Promise<void>;
    private toSubSubSubItemDto;
    findAllSubSubSubItems(): Promise<SubSubSubItemDto[]>;
    findOneSubSubSubItem(id: string): Promise<SubSubSubItemDto>;
    createSubSubSubItem(dto: CreateSubSubSubItemDto, user: any): Promise<SubSubSubItemDto>;
    updateSubSubSubItem(id: string, dto: CreateSubSubSubItemDto, user: any): Promise<SubSubSubItemDto>;
    deleteSubSubSubItem(id: string): Promise<void>;
}
