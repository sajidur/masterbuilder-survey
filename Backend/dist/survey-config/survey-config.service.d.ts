import { Repository } from 'typeorm/repository/Repository';
import { QuestionGroup } from './survey-config.entity/questionGroup.entity';
import { Question } from './survey-config.entity/question.entity';
import { Option } from './survey-config.entity/option.entity';
import { QuestionModel } from './survey-config.entity/question-model.entity';
import { Survey } from './survey-config.entity/survey.entity';
import { CreateSurveyDto } from './survey-config.dto/survey.dto';
import { Answer } from './survey-config.entity/answer.entity';
import { CreateAnswerDto, UpdateAnswerDto } from './survey-config.dto/create-answer.dto';
import { SubSubItemAnswer } from './survey-config.entity/subSubItemAnswer.entity';
import { CreateSubSubItemAnswerDto, SubSubItemAnswerResponseDto } from './survey-config.dto/CreateSubSubItemAnswer.dto';
import { SubSubItem } from 'src/module/module.entity/subsubitem.entity';
import { User } from 'src/user/user.entity/user.entity';
export declare class SurveyConfigService {
    private questionGroupRepo;
    private subSubItemRepo;
    private readonly questionRepo;
    private readonly optionRepository;
    private readonly questionModelRepository;
    private surveyRepository;
    private readonly answerRepository;
    private readonly subSubItemAnswerRepository;
    constructor(questionGroupRepo: Repository<QuestionGroup>, subSubItemRepo: Repository<SubSubItem>, questionRepo: Repository<Question>, optionRepository: Repository<Option>, questionModelRepository: Repository<QuestionModel>, surveyRepository: Repository<Survey>, answerRepository: Repository<Answer>, subSubItemAnswerRepository: Repository<SubSubItemAnswer>);
    create(createSurveyDto: CreateSurveyDto, user: User): Promise<Survey>;
    findAll(): Promise<Survey[]>;
    findOne(id: string): Promise<Survey>;
    update(id: string, updateSurveyDto: CreateSurveyDto, user: User): Promise<Survey>;
    remove(id: string): Promise<Survey>;
    createanswer(createAnswerDto: CreateAnswerDto, user: User): Promise<Answer>;
    findOneAnswer(id: string): Promise<Answer>;
    updateAnswer(id: string, updateDto: UpdateAnswerDto, user: User): Promise<Answer>;
    removeAnswer(id: string): Promise<void>;
    createSubAns(dto: CreateSubSubItemAnswerDto, user: User): Promise<SubSubItemAnswerResponseDto>;
    findAllSubAns(): Promise<SubSubItemAnswerResponseDto[]>;
    findByIdSubAns(id: string): Promise<SubSubItemAnswerResponseDto>;
    deleteSubAns(id: string): Promise<void>;
}
